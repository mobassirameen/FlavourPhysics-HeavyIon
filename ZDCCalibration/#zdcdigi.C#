#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TMath.h>
#include <TF1.h>
#include <TH1D.h>
#include "TGraphAsymmErrors.h"
#include "TVirtualFFT.h"
#include "TBinomialEfficiencyFitter.h"
#include "TVectorF.h"
#include "TPaveText.h"
#include <vector>
#include "TTree.h"
#include "TFile.h"
#include "TEventList.h"
#include "Riostream.h"
#include "string.h"
#include "TList.h"
#include "TDirectory.h"
#include "TCut.h"
#include "TChain.h"
#include "TH2F.h"
#include "TH3F.h"
#include "TCanvas.h"
#include "TEfficiency.h"
#include "TLorentzVector.h"
#include "TProfile.h"

using namespace std;

Double_t fit(Double_t x, Double_t par){

Double func = 10*noise +



}




void zdcdigi(){
  TCanvas *c = new TCanvas("c", "c", 0, 0, 1000, 600);
  TFile *fIn1 = new TFile("/Users/md/Documents/ZDCCalibration/zdc_digi_minbias.root"); 
  //if (!fIn1){return;}
  TTree* mumu = (TTree*)fIn1->Get("analyzer/zdcdigi");

  const int NSIDE=2; const char* stit[NSIDE] = {"#minus","#plus"};  const char* stit2[NSIDE] = {"neg","pos"};
  const int NTYPE=2; const char* ttit[NTYPE] = {"EM","HAD"};
  const int NCH=5; const char* ctit[NTYPE][NCH] = {
    {"1","2","3","4","5"}, //HD sections run only 1-4                                          
    {"1","2","3","4","5"} //EM sections run 1-5                                                
  };

  TProfile* chargetime_ZDC[2][2][5];
  TH2F* adc_ZDC[2][2][5];
  TH2F* adc_RPD[2][16];

  TH2F* fC_ZDC[2][2][5];
  TH2F* fC_RPD[2][16];

  for(int i = 0; i < 2; i++){
    for(int j = 0; j < 2; j++)
      for(int k = 0; k < 5; k++){
     adc_ZDC[i][j][k] = new TH2F(Form("adc ZDC %s%s channel %d",ttit[j],stit[i],k+1),Form("ZDC %s%s channel %d;TS [25 ns];ADC",ttit[j],stit\
											     [i],k+1),10,-0.5,9.5,256,0,256);
     fC_ZDC[i][j][k] = new TH2F(Form("fC ZDC %s%s channel %d",ttit[j],stit[i],k+1),Form("ZDC %s%s channel %d;TS [25 ns];Q [fC]",
ttit[j],stit[i],k+1),10,-0.5,9.5,2500,1,350000);
     //   chargetime_ZDC[i][j][k] = new TProfile(Form("fC ZDC %s%s channel %d",ttit[j],stit[i],k+1),Form("ZDC %s%s channel %d;TS [25 ns];Q [fC]",
     //											    ttit[j],stit[i],k+1),10,-0.5,9.5,50,1,350000);

     chargetime_ZDC[i][j][k] = new TProfile(Form("fC ZDC %s%s channel %d",ttit[j],stit[i],k+1),Form("ZDC %s%s channel %d;TS [25 ns];Q [fC]",ttit[j],stit[i],k+1),10,-0.5,9.5,1,350000);


      }

    


 for(int j = 0; j < 16; j++){
      adc_RPD[i][j] = new TH2F(Form("adc RPD%s channel %d",stit[i],j+1),Form("RPD%s channel %d;TS [25 ns];ADC",stit[i],j+1),10,-0.5,9.5,256,0,\
			       256);
      fC_RPD[i][j] = new TH2F(Form("fC RPD%s channel %d",stit[i],j+1),Form("RPD%s channel %d;TS [25 ns];Q [fC]",stit[i],j+1),10,-0.5,9.5,256,1\
			      ,350000);
    }

  }



  const int NTS=10;
  TLeaf* bxidLeaf = (TLeaf*) mumu->GetLeaf("bxid");
  TLeaf* zsideLeaf = (TLeaf*) mumu->GetLeaf("zside");
  TLeaf* sectionLeaf = (TLeaf*) mumu->GetLeaf("section");
  TLeaf* channelLeaf = (TLeaf*) mumu->GetLeaf("channel");
  TLeaf* ntrk = (TLeaf*) mumu->GetLeaf("nTrack");
  TLeaf* nHFneg = (TLeaf*) mumu->GetLeaf("nHFneg");
  TLeaf* nHFpos = (TLeaf*) mumu->GetLeaf("nHFpos");
  TLeaf* adcLeaf[NTS];
  TLeaf* fCleaf[NTS];

  for(int iTS = 0; iTS < NTS; iTS++){
    adcLeaf[iTS] = (TLeaf*) mumu->GetLeaf(Form("adc%d",iTS));
    fCleaf[iTS] = (TLeaf*) mumu->GetLeaf(Form("nfC%d",iTS));
  }


  TH1D* hadcseven = new TH1D("hadcseven","adc_7 signal shape ; signal shape of 7 ;Events", 100 ,0, 4);
  TH1D* hnfcseven = new TH1D("hnfcseven","nfc_7 signal shape ; signal shape of 7 ;Events", 100 ,0.0, 400.0);   
    for(int i = 0; i < mumu->GetEntries(); i++){
    //for(int i = 0; i < 10; i++){
    mumu->GetEntry(i);
     
      for(int n = 0; n < 50; n++){

	int side = (int)((zsideLeaf->GetValue(n)+1)/2.0);
	int type = (int)(sectionLeaf->GetValue(n))-1;
	int channel = (int)(channelLeaf->GetValue(n))-1;

                                                  
	for(int iTS = 0; iTS < 10; iTS++){
	  if(type != 3){ // EM or HAD section                                                                                                    
	                 adc_ZDC[side][type][channel]->Fill(iTS,adcLeaf[iTS]->GetValue(n));
	                 fC_ZDC[side][type][channel]->Fill(iTS,fCleaf[iTS]->GetValue(n));
			 chargetime_ZDC[side][type][channel]->Fill(iTS,fCleaf[iTS]->GetValue(n),1);	                 
//event->SetBinContent(iTS+1,fCleaf[iTS]->GetValue(n));                                                         
	                }
	    else{ // RPD section                                                                                                               
           	    //if(adcLeaf[iTS]->GetValue(n) > max)                                                                    
	            //  max = adcLeaf[iTS]->GetValue(n);
                    adc_RPD[side][channel]->Fill(iTS,adcLeaf[iTS]->GetValue(n));
	            fC_RPD[side][channel]->Fill(iTS,fCleaf[iTS]->GetValue(n));
	        }
        	}

                }

      //      if(i % 100000 == 0) 
std::cout << i << " events are processed." << std::endl;
  }
  TCanvas *c1 = new TCanvas();      
  c1->SetLogy();
  c1->SetLogz();

  /*for(int iside = 0; iside < 2; iside++)
    for(int itype = 0; itype < 2; itype++)
      for(int ich = 0; ich < 5; ich++){
        adc_ZDC[iside][itype][ich]->Draw("colz");
        c1->SaveAs(Form("/Users/md/Documents/ZDCCalibration/pic/adc_ZDC_%s_%s_channel_%d.png",ttit[itype],stit2[iside],ich+1));
        //adc_ZDC[iside][itype][ich]->Write();
	// f2.Write();
      }*/


  for(int iside = 0; iside < 2; iside++)
    for(int itype = 0; itype < 2; itype++)
      for(int ich = 0; ich < 5; ich++){
        chargetime_ZDC[iside][itype][ich]->Draw("colz");
        c1->SaveAs(Form("/Users/md/Documents/ZDCCalibration/pic/chargetime_ZDC_%s_%s_channel_%d.png",ttit[itype],stit2[iside],ich+1));
                                                                                                                                                                                      
      }




  /*for(int iside = 0; iside < 2; iside++)
    for(int itype = 0; itype < 2; itype++)
      for(int ich = 0; ich < 5; ich++){
        fC_ZDC[iside][itype][ich]->Draw("colz");
        c1->SaveAs(Form("/Users/md/Documents/ZDCCalibration/pic/fC_ZDC_%s_%s_channel_%d.png",ttit[itype],stit2[iside],ich+1));
        //fC_ZDC[iside][itype][ich]->Write();
	//  f2.Write();
      }*/


  // RPD- channels separately                                                                                                                  
  /*for(int i = 0; i < 16; i++){
    adc_RPD[0][i]->Draw("colz");
    c1->SaveAs(Form("/Users/md/Documents/ZDCCalibration/pic/adc_RPD_Minus_channel_%d.png",i));
    //adc_RPD[0][i]->Write();
    //f2.Write();
  }

  // RPD+ channels separately                                                                                                                  
  for(int i = 0; i < 16; i++){
    adc_RPD[1][i]->Draw("colz");
    c1->SaveAs(Form("/Users/md/Documents/ZDCCalibration/pic/adc_RPD_Plus_channel_%d.png",i));
    //adc_RPD[1][i]->Write();
    //f2.Write();
  }

  // RPD- channels separately                                                                                                                  
  for(int i = 0; i < 16; i++){
    fC_RPD[0][i]->Draw("colz");
    c1->SaveAs(Form("/Users/md/Documents/ZDCCalibration/pic/fC_RPD_Minus_channel_%d.png",i));
    //fC_RPD[0][i]->Write();
    //f2.Write();
  }

  // RPD+ channels separately                                                                                                                  
  for(int i = 0; i < 16; i++){
    fC_RPD[1][i]->Draw("hist e");
    c1->SaveAs(Form("/Users/md/Documents/ZDCCalibration/pic/fC_RPD_Plus_channel_%d.png",i));
    //fC_RPD[1][i]->Write();
    // f2.Write();
  }*/



}
